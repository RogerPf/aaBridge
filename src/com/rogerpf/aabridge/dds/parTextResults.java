package com.rogerpf.aabridge.dds;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * <i>native declaration : line 286</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class parTextResults extends Structure {
	/**
	 * Short text for par information, e.g.<br>
	 * Par -110: EW 2S EW 2D+1<br>
	 * C type : char[2][128]
	 */
	public byte[] parText = new byte[((2) * (128))];
	/**
	 * true in the normal case when it does not matter who<br>
	 * starts the bidding. Otherwise, false.
	 */
	public byte equal;

	public parTextResults() {
		super();
	}

	protected List<?> getFieldOrder() {
		return Arrays.asList("parText", "equal");
	}

	/**
	 * @param parText Short text for par information, e.g.<br>
	 * Par -110: EW 2S EW 2D+1<br>
	 * C type : char[2][128]<br>
	 * @param equal true in the normal case when it does not matter who<br>
	 * starts the bidding. Otherwise, false.
	 */
	public parTextResults(byte parText[], byte equal) {
		super();
		if ((parText.length != this.parText.length))
			throw new IllegalArgumentException("Wrong array size !");
		this.parText = parText;
		this.equal = equal;
	}

	public parTextResults(Pointer peer) {
		super(peer);
	}

	public static class ByReference extends parTextResults implements Structure.ByReference {

	};

	public static class ByValue extends parTextResults implements Structure.ByValue {

	};
}
