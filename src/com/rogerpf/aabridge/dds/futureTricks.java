package com.rogerpf.aabridge.dds;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * SolveAllChunks*()<br>
 * <i>native declaration : line 159</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class futureTricks extends Structure {
	public int nodes;
	public int cards;
	/** C type : int[13] */
	public int[] suit = new int[13];
	/** C type : int[13] */
	public int[] rank = new int[13];
	/** C type : int[13] */
	public int[] equals$ = new int[13];
	/** C type : int[13] */
	public int[] score = new int[13];

	public futureTricks() {
		super();
	}

	protected List<?> getFieldOrder() {
		return Arrays.asList("nodes", "cards", "suit", "rank", "equals$", "score");
	}

	/**
	 * @param suit C type : int[13]<br>
	 * @param rank C type : int[13]<br>
	 * @param equals$ C type : int[13]<br>
	 * @param score C type : int[13]
	 */
	public futureTricks(int nodes, int cards, int suit[], int rank[], int equals$[], int score[]) {
		super();
		this.nodes = nodes;
		this.cards = cards;
		if ((suit.length != this.suit.length))
			throw new IllegalArgumentException("Wrong array size !");
		this.suit = suit;
		if ((rank.length != this.rank.length))
			throw new IllegalArgumentException("Wrong array size !");
		this.rank = rank;
		if ((equals$.length != this.equals$.length))
			throw new IllegalArgumentException("Wrong array size !");
		this.equals$ = equals$;
		if ((score.length != this.score.length))
			throw new IllegalArgumentException("Wrong array size !");
		this.score = score;
	}

	public futureTricks(Pointer peer) {
		super(peer);
	}

	public static class ByReference extends futureTricks implements Structure.ByReference {

	};

	public static class ByValue extends futureTricks implements Structure.ByValue {

	};
}
